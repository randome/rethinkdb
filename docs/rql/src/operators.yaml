sections:
  - tag: operators
    name: Math and logic
    description: These commands provide basic mathematical and logical operators.
    order: 10

commands:
  - tag: add
    section: operators
    description: Sum two numbers or concatenate two strings.

    name: +
    is_operator: true
    body: other
    parent: datum
    returns: datum

    examples:
      - description: It's as easy as 2 + 2 = 4.
        code:
          js: r.expr(2).add(2).run(conn, callback)
          py: (r.expr(2) + 2).run(conn)
          rb: (r(2) + 2).run(conn)
      - description: Strings can be concatenated too.
        code:
          js: r.expr("foo").add("bar").run(conn, callback)
          py: (r.expr("foo") + "bar").run(conn)
          rb: (r("foo") + "bar").run(conn)

    js:
      name: add
      is_operator: false
      examples:
        0:
          can_try: true
          dataset: marvel
        1:
          can_try: true
          dataset: marvel

  - tag: sub
    section: operators
    description: Subtract two numbers.

    name: '-'
    body: number
    is_operator: true
    parent: number
    returns: number

    examples:
      - description: It's as easy as 2 - 2 = 0.
        code:
          js: r.expr(2).sub(2).run(conn, callback)
          py: (r.expr(2) - 2).run(conn)
          rb: (r(2) - 2).run(conn)

    js:
      name: sub
      is_operator: false
      examples:
        0:
          can_try: true
          dataset: marvel

  - tag: mul
    section: operators
    description: Multiply two numbers.

    name: '*'
    body: number
    is_operator: true
    parent: number
    returns: number

    examples:
      - description: It's as easy as 2 * 2 = 4.
        code:
          js: r.expr(2).mul(2).run(conn, callback)
          py: (r.expr(2) * 2).run(conn)
          rb: (r(2) * 2).run(conn)

    js:
      name: mul
      is_operator: false
      examples:
        0:
          can_try: true
          dataset: marvel

  - tag: div
    section: operators
    description: Divide two numbers.

    name: '/'
    body: number
    is_operator: true
    parent: number
    returns: number

    examples:
      - description: It's as easy as 2 / 2 = 1.
        code:
          js: r.expr(2).div(2).run(conn, callback)
          py: (r.expr(2) / 2).run(conn)
          rb: (r(2) / 2).run(conn)

    js:
      name: div
      is_operator: false
      examples:
        0:
          can_try: true
          dataset: marvel

  - tag: mod
    section: operators
    description: Find the remainder when dividing two numbers.

    name: '%'
    body: number
    is_operator: true
    parent: number
    returns: number

    examples:
      - description: It's as easy as 2 % 2 = 0.
        code:
          js: r.expr(2).mod(2).run(conn, callback)
          py: (r.expr(2) % 2).run(conn)
          rb: (r(2) % 2).run(conn)

    js:
      name: mod
      is_operator: false
      examples:
        0:
          can_try: true
          dataset: marvel

  - tag: and
    section: operators
    description: Compute the logical and of two values.

    name: '&'
    body: bool
    is_operator: true
    parent: bool
    returns: bool

    examples:
      - description: True and false anded is false?
        code:
          js: r.expr(true).and(false).run(conn, callback)
          py: (r.expr(True) & False).run(conn)
          rb: (r(true) & false).run(conn)

    js:
      name: and
      is_operator: false
      examples:
        0:
          can_try: true
          dataset: marvel


  - tag: or
    section: operators
    description: Compute the logical or of two values.

    name: '|'
    body: bool
    is_operator: true
    parent: bool
    returns: bool

    examples:
      - description: True or false ored is true?
        code:
          js: r.expr(true).or(false).run(conn, callback)
          py: (r.expr(True) | False).run(conn)
          rb: (r(true) | false).run(conn)

    js:
      name: or
      is_operator: false
      examples:
        0:
          can_try: true
          dataset: marvel

  - tag: eq
    section: operators
    description: Test if two values are equal.

    body: datum
    is_operator: true
    parent: datum
    returns: bool

    examples:
      - description: Does 2 equal 2?
        code:
          js: r.expr(2).eq(2).run(conn, callback)
          py: (r.expr(2) == 2).run(conn)
          rb: (r(2).eq 2).run(conn)

    py:
      name: '=='

    js:
      is_operator: false
      examples:
        0:
          can_try: true
          dataset: marvel

  - tag: ne
    section: operators
    description: Test if two values are not equal.

    body: datum
    is_operator: true
    parent: datum
    returns: bool

    examples:
      - description: Does 2 not equal 2?
        code:
          js: r.expr(2).ne(2).run(conn, callback)
          py: (r.expr(2) != 2).run(conn)
          rb: (r(2).ne 2).run(conn)

    py:
      name: '!='

    js:
      is_operator: false
      examples:
        0:
          can_try: true
          dataset: marvel


  - tag: gt
    section: operators
    description: Test if the first value is greater than other.

    name: '>'
    body: datum
    is_operator: true
    parent: datum
    returns: bool

    examples:
      - description: Is 2 greater than 2?
        code:
          js: r.expr(2).gt(2).run(conn, callback)
          py: (r.expr(2) > 2).run(conn)
          rb: (r(2) > 2).run(conn)

    js:
      name: gt
      is_operator: false
      examples:
        0:
          can_try: true
          dataset: marvel

  - tag: ge
    section: operators
    description: Test if the first value is greater than or equal to other.

    name: '>='
    body: datum
    is_operator: true
    parent: datum
    returns: bool

    examples:
      - description: Is 2 greater than or equal to 2?
        code:
          js: r.expr(2).ge(2).run(conn, callback)
          py: (r.expr(2) >= 2).run(conn)
          rb: (r(2) >= 2).run(conn)

    js:
      name: ge
      is_operator: false
      examples:
        0:
          can_try: true
          dataset: marvel

  - tag: lt
    section: operators
    description: Test if the first value is less than other.

    name: '<'
    body: datum
    is_operator: true
    parent: datum
    returns: bool

    examples:
      - description: Is 2 less than 2?
        code:
          js: r.expr(2).lt(2).run(conn, callback)
          py: (r.expr(2) < 2).run(conn)
          rb: (r(2) < 2).run(conn)

    js:
      name: lt
      is_operator: false
      examples:
        0:
          can_try: true
          dataset: marvel

  - tag: le
    section: operators
    description: Test if the first value is less than or equal to other.

    name: '<='
    body: datum
    is_operator: true
    parent: datum
    returns: bool

    examples:
      - description: Is 2 less than or equal to 2?
        code:
          js: r.expr(2).le(2).run(conn, callback)
          py: (r.expr(2) <= 2).run(conn)
          rb: (r(2) <= 2).run(conn)

    js:
      name: le
      is_operator: false
      examples:
        0:
          can_try: true
          dataset: marvel

  - tag: not
    section: operators
    description: Compute the logical inverse (not).

    is_operator: true
    parent: bool
    returns: bool

    examples:
      - description: Not true is false.
        code:
          js: r.expr(true).not().run(conn, callback)
          py: (~r.expr(True)).run(conn)
          rb: r(true).not.run(conn)

    rb:
      dont_need_parenthesis: true
      is_operator: false

    py:
      name: '~'
      operator_first: true

    js:
      is_operator: false
      examples:
        0:
          can_try: true
          dataset: marvel

